# AUTOMATICALLY GENERATED by `hatch run tower --print-completion bash`

_shtab_tower_subparsers=('provision' 'upgrade' 'install' 'run' 'status' 'wlan-connect' 'version')

_shtab_tower_option_strings=('-h' '--help' '--quiet' '--verbose')
_shtab_tower_provision_option_strings=('-h' '--help' '--boot-device' '--zero-device' '--no-confirm' '--image' '--ifname' '--no-wait' '--timeout' '--force' '--public-key-path' '--private-key-path' '--password' '--keyboard-layout' '--keyboard-variant' '--timezone' '--lang' '--online' '--offline' '--wlan-ssid' '--wlan-password' '--color')
_shtab_tower_upgrade_option_strings=('-h' '--help' '--boot-device' '--zero-device' '--no-confirm' '--image' '--ifname' '--no-wait' '--timeout' '--force')
_shtab_tower_install_option_strings=('-h' '--help')
_shtab_tower_run_option_strings=('-h' '--help' '--nx-link' '--nx-limit' '--nx-images' '--nx-cache' '--nx-stream' '--nx-data' '--nx-delta' '--waypipe' '--wp-compress' '--wp-threads' '--wp-video')
_shtab_tower_status_option_strings=('-h' '--help' '--host' '--json')
_shtab_tower_wlan_connect_option_strings=('-h' '--help' '--ssid' '--password')
_shtab_tower_version_option_strings=('-h' '--help')



_shtab_tower_pos_0_choices=('provision' 'upgrade' 'install' 'run' 'status' 'wlan-connect' 'version')
_shtab_tower___print_completion_choices=('bash' 'zsh' 'tcsh')
_shtab_tower_provision___color_choices=('White' 'Red' 'Green' 'Yellow' 'Blue' 'Magenta' 'Cyan' 'Light gray' 'Light red' 'Light green' 'Light yellow' 'Light blue' 'Light magenta' 'Light cyan')
_shtab_tower_run___nx_stream_choices=('0' '1' '2' '3' '4' '5' '6' '7' '8' '9')
_shtab_tower_run___nx_data_choices=('0' '1' '2' '3' '4' '5' '6' '7' '8' '9')
_shtab_tower_run___nx_delta_choices=('0' '1')

_shtab_tower_pos_0_nargs=A...
_shtab_tower__h_nargs=0
_shtab_tower___help_nargs=0
_shtab_tower___quiet_nargs=0
_shtab_tower___verbose_nargs=0
_shtab_tower_provision_pos_0_nargs=1
_shtab_tower_provision__h_nargs=0
_shtab_tower_provision___help_nargs=0
_shtab_tower_provision___zero_device_nargs=0
_shtab_tower_provision___no_confirm_nargs=0
_shtab_tower_provision___no_wait_nargs=0
_shtab_tower_provision___force_nargs=0
_shtab_tower_provision___online_nargs=0
_shtab_tower_provision___offline_nargs=0
_shtab_tower_upgrade_pos_0_nargs=1
_shtab_tower_upgrade__h_nargs=0
_shtab_tower_upgrade___help_nargs=0
_shtab_tower_upgrade___zero_device_nargs=0
_shtab_tower_upgrade___no_confirm_nargs=0
_shtab_tower_upgrade___no_wait_nargs=0
_shtab_tower_upgrade___force_nargs=0
_shtab_tower_install_pos_0_nargs=1
_shtab_tower_install_pos_1_nargs=+
_shtab_tower_install__h_nargs=0
_shtab_tower_install___help_nargs=0
_shtab_tower_run_pos_0_nargs=1
_shtab_tower_run_pos_1_nargs=+
_shtab_tower_run__h_nargs=0
_shtab_tower_run___help_nargs=0
_shtab_tower_run___waypipe_nargs=0
_shtab_tower_status__h_nargs=0
_shtab_tower_status___help_nargs=0
_shtab_tower_status___json_nargs=0
_shtab_tower_wlan_connect__h_nargs=0
_shtab_tower_wlan_connect___help_nargs=0
_shtab_tower_version__h_nargs=0
_shtab_tower_version___help_nargs=0


# $1=COMP_WORDS[1]
_shtab_compgen_files() {
  compgen -f -- $1  # files
}

# $1=COMP_WORDS[1]
_shtab_compgen_dirs() {
  compgen -d -- $1  # recurse into subdirs
}

# $1=COMP_WORDS[1]
_shtab_replace_nonword() {
  echo "${1//[^[:word:]]/_}"
}

# set default values (called for the initial parser & any subparsers)
_set_parser_defaults() {
  local subparsers_var="${prefix}_subparsers[@]"
  sub_parsers=${!subparsers_var-}

  local current_option_strings_var="${prefix}_option_strings[@]"
  current_option_strings=${!current_option_strings_var}

  completed_positional_actions=0

  _set_new_action "pos_${completed_positional_actions}" true
}

# $1=action identifier
# $2=positional action (bool)
# set all identifiers for an action's parameters
_set_new_action() {
  current_action="${prefix}_$(_shtab_replace_nonword $1)"

  local current_action_compgen_var=${current_action}_COMPGEN
  current_action_compgen="${!current_action_compgen_var-}"

  local current_action_choices_var="${current_action}_choices[@]"
  current_action_choices="${!current_action_choices_var-}"

  local current_action_nargs_var="${current_action}_nargs"
  if [ -n "${!current_action_nargs_var-}" ]; then
    current_action_nargs="${!current_action_nargs_var}"
  else
    current_action_nargs=1
  fi

  current_action_args_start_index=$(( $word_index + 1 ))

  current_action_is_positional=$2
}

# Notes:
# `COMPREPLY`: what will be rendered after completion is triggered
# `completing_word`: currently typed word to generate completions for
# `${!var}`: evaluates the content of `var` and expand its content as a variable
#     hello="world"
#     x="hello"
#     ${!x} -> ${hello} -> "world"
_shtab_tower() {
  local completing_word="${COMP_WORDS[COMP_CWORD]}"
  local completed_positional_actions
  local current_action
  local current_action_args_start_index
  local current_action_choices
  local current_action_compgen
  local current_action_is_positional
  local current_action_nargs
  local current_option_strings
  local sub_parsers
  COMPREPLY=()

  local prefix=_shtab_tower
  local word_index=0
  _set_parser_defaults
  word_index=1

  # determine what arguments are appropriate for the current state
  # of the arg parser
  while [ $word_index -ne $COMP_CWORD ]; do
    local this_word="${COMP_WORDS[$word_index]}"

    if [[ -n $sub_parsers && " ${sub_parsers[@]} " == *" ${this_word} "* ]]; then
      # valid subcommand: add it to the prefix & reset the current action
      prefix="${prefix}_$(_shtab_replace_nonword $this_word)"
      _set_parser_defaults
    fi

    if [[ " ${current_option_strings[@]} " == *" ${this_word} "* ]]; then
      # a new action should be acquired (due to recognised option string or
      # no more input expected from current action);
      # the next positional action can fill in here
      _set_new_action $this_word false
    fi

    if [[ "$current_action_nargs" != "*" ]] && \
       [[ "$current_action_nargs" != "+" ]] && \
       [[ "$current_action_nargs" != *"..." ]] && \
       (( $word_index + 1 - $current_action_args_start_index >= \
          $current_action_nargs )); then
      $current_action_is_positional && let "completed_positional_actions += 1"
      _set_new_action "pos_${completed_positional_actions}" true
    fi

    let "word_index+=1"
  done

  # Generate the completions

  if [[ "${completing_word}" == -* ]]; then
    # optional argument started: use option strings
    COMPREPLY=( $(compgen -W "${current_option_strings[*]}" -- "${completing_word}") )
  else
    # use choices & compgen
    local IFS=$'\n' # items may contain spaces, so delimit using newline
    COMPREPLY=( $([ -n "${current_action_compgen}" ] \
                  && "${current_action_compgen}" "${completing_word}") )
    unset IFS
    COMPREPLY+=( $(compgen -W "${current_action_choices[*]}" -- "${completing_word}") )
  fi

  return 0
}

complete -o filenames -F _shtab_tower tower
